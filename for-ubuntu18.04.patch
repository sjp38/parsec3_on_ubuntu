From 2eb05edce9152a5f0dadfced6413c3f8810f81b0 Mon Sep 17 00:00:00 2001
From: Yunjae Lee <lyj7694@gmail.com>
Date: Fri, 26 Apr 2019 00:11:26 +0900
Subject: [PATCH] Modify source for Ubuntu 18.04

Signed-off-by: Yunjae Lee <lyj7694@gmail.com>
---
 config/gcc.bldconf                            |  4 +-
 .../ferret/src/benchmark/ferret-pthreads.c    | 19 +++---
 .../apps/ferret/src/benchmark/ferret-serial.c |  7 ++-
 pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp | 21 +++----
 pkgs/apps/ferret/src/src/lsh/LSH.h            |  4 +-
 pkgs/apps/x264/parsec/gcc-pthreads.bldconf    |  2 +-
 .../src/server/benchmark/ferret-pthreads.c    | 59 ++++++++++---------
 .../netferret/src/server/src/lsh/LSH.h        |  4 +-
 8 files changed, 64 insertions(+), 56 deletions(-)

diff --git a/config/gcc.bldconf b/config/gcc.bldconf
index 144f623..b131a9f 100644
--- a/config/gcc.bldconf
+++ b/config/gcc.bldconf
@@ -51,8 +51,8 @@ case "${OSTYPE}" in
 esac
 
 # Compilers and preprocessors
-export CC="${CC_HOME}/bin/gcc"
-export CXX="${CC_HOME}/bin/g++"
+export CC="${CC_HOME}/bin/gcc-5"
+export CXX="${CC_HOME}/bin/g++-5"
 export CPP="${CC_HOME}/bin/cpp"
 export CXXCPP=""
 
diff --git a/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c b/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
index 06b3d9c..aa5f461 100644
--- a/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
+++ b/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
@@ -1,6 +1,6 @@
 /* AUTORIGHTS
 Copyright (C) 2007 Princeton University
-      
+
 This file is part of Ferret Toolkit.
 
 Ferret Toolkit is free software; you can redistribute it and/or modify
@@ -40,6 +40,7 @@ Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 #define DEFAULT_DEPTH	25
 #define MAXR	100
 #define IMAGE_DIM	14
+#define HUGE		3.40282347e+38F
 
 const char *db_dir = NULL;
 const char *table_name = NULL;
@@ -233,7 +234,7 @@ void *t_seg (void *dummy)
 	{
 		if(dequeue(&q_load_seg, &load) < 0)
 		    break;
-		
+
 		assert(load != NULL);
 		seg = (struct seg_data *)calloc(1, sizeof(struct seg_data));
 
@@ -264,7 +265,7 @@ void *t_extract (void *dummy)
 	{
 		if(dequeue(&q_seg_extract, &seg) < 0)
 		    break;
-		
+
 		assert(seg != NULL);
 		extract = (struct extract_data *)calloc(1, sizeof(struct extract_data));
 
@@ -292,7 +293,7 @@ void *t_vec (void *dummy)
 	{
 		if(dequeue(&q_extract_vec, &extract) < 0)
 		    break;
-		
+
 		assert(extract != NULL);
 		vec = (struct vec_query_data *)calloc(1, sizeof(struct vec_query_data));
 		vec->name = extract->name;
@@ -334,7 +335,7 @@ void *t_rank (void *dummy)
 	{
 		if(dequeue(&q_vec_rank, &vec) < 0)
 		    break;
-		
+
 		assert(vec != NULL);
 
 		rank = (struct rank_data *)calloc(1, sizeof(struct rank_data));
@@ -379,7 +380,7 @@ void *t_out (void *dummy)
 	{
 		if(dequeue(&q_rank_out, &rank) < 0)
 		    break;
-		
+
 		assert(rank != NULL);
 
 		fprintf(fout, "%s", rank->name);
@@ -400,7 +401,7 @@ void *t_out (void *dummy)
 		free(rank);
 
 		cnt_dequeue++;
-		
+
 		fprintf(stderr, "(%d,%d)\n", cnt_enqueue, cnt_dequeue);
 	}
 
@@ -443,7 +444,7 @@ int main (int argc, char *argv[])
 
 	if (argc < 8)
 	{
-		printf("%s <database> <table> <query dir> <top K> <depth> <n> <out>\n", argv[0]); 
+		printf("%s <database> <table> <query dir> <top K> <depth> <n> <out>\n", argv[0]);
 		return 0;
 	}
 
@@ -487,7 +488,7 @@ int main (int argc, char *argv[])
 	}
 
 	if (query_table != table) cass_table_load(query_table);
-	
+
 	cass_map_load(query_table->map);
 
 	cass_table_load(table);
diff --git a/pkgs/apps/ferret/src/benchmark/ferret-serial.c b/pkgs/apps/ferret/src/benchmark/ferret-serial.c
index 7263418..9ba060b 100644
--- a/pkgs/apps/ferret/src/benchmark/ferret-serial.c
+++ b/pkgs/apps/ferret/src/benchmark/ferret-serial.c
@@ -1,6 +1,6 @@
 /* AUTORIGHTS
 Copyright (C) 2007 Princeton University
-      
+
 This file is part of Ferret Toolkit.
 
 Ferret Toolkit is free software; you can redistribute it and/or modify
@@ -34,6 +34,7 @@ Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
 #define MAXR	100
 #define IMAGE_DIM	14
+#define HUGE		3.40282347e+38F
 
 const char *db_dir = NULL;
 const char *table_name = NULL;
@@ -169,7 +170,7 @@ void do_query (const char *name)
 	free(HSV);
 	free(RGB);
 	free(mask);
-	
+
 	}
 
 	memset(&query, 0, sizeof query);
@@ -251,7 +252,7 @@ int main (int argc, char *argv[])
 
 	if (argc < 8)
 	{
-		printf("%s <database> <table> <query dir> <top K> <depth> <n> <out>\n", argv[0]); 
+		printf("%s <database> <table> <query dir> <top K> <depth> <n> <out>\n", argv[0]);
 		return 0;
 	}
 
diff --git a/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp b/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp
index 4f3c4cb..0518a7e 100644
--- a/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp
+++ b/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp
@@ -38,6 +38,7 @@ Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 #define DEFAULT_DEPTH	25
 #define MAXR	100
 #define IMAGE_DIM	14
+#define HUGE		3.40282347e+38F
 
 /* Backwards compatability hack for TBB 2.1 (which ships with Parsec)
    TBB 2.2 changes the modes for filter in a pipeline.
@@ -170,7 +171,7 @@ filter_load::filter_load(const char * dir) :
 	tbb::filter(SERIAL_IN_ORDER_FILTER)
 {
 	m_path[0] = 0;
-	
+
 	if (strcmp(dir, ".") == 0) {
 		m_single_file = NULL;
 		push_dir(".");
@@ -181,7 +182,7 @@ filter_load::filter_load(const char * dir) :
 	else {
 		int ret;
 		struct stat st;
-		
+
 		ret = stat(dir, &st);
 		if (ret != 0)
 		{
@@ -200,7 +201,7 @@ filter_load::filter_load(const char * dir) :
 void filter_load::push_dir(const char * dir) {
 	int path_len = strlen(m_path);
 	DIR *pd = NULL;
-	
+
 	strcat(m_path, dir);
 	pd = opendir(m_path);
 	if (pd != NULL) {
@@ -239,12 +240,12 @@ void *filter_load::operator()( void* item ){
 			if(m_dir_stack.empty())
 				return NULL;
 		}
-		
+
 		if((ent->d_name[0] == '.') &&
-		   ((ent->d_name[1] == 0) || ((ent->d_name[1] == '.') && 
+		   ((ent->d_name[1] == 0) || ((ent->d_name[1] == '.') &&
 					      (ent->d_name[2] == 0)) ) )
 			continue;
-		
+
 		strcat(m_path, ent->d_name);
 		res = stat(m_path, &st);
 		if (res != 0)
@@ -272,7 +273,7 @@ filter_seg::filter_seg() :
 
 void *filter_seg::operator()( void* item ) {
 	struct all_data *data = (struct all_data*)item;
-	
+
 	data->second.seg.name = data->first.load.name;
 
 	data->second.seg.width = data->first.load.width;
@@ -355,7 +356,7 @@ filter_rank::filter_rank() :
 
 void *filter_rank::operator()(void* item) {
 	struct all_data *data = (struct all_data*) item;
-	
+
 	cass_result_t *candidate;
 	cass_query_t query;
 
@@ -398,7 +399,7 @@ filter_out::filter_out() :
 
 void *filter_out::operator()(void* item) {
 	struct all_data *data = (struct all_data *) item;
-	
+
 	fprintf(fout, "%s", data->first.rank.name);
 
 	ARRAY_BEGIN_FOREACH(data->first.rank.result.u.list, cass_list_entry_t p)
@@ -446,7 +447,7 @@ int main (int argc, char *argv[])
 
 	if (argc < 8)
 	{
-		printf("%s <database> <table> <query dir> <top K> <ignored> <n> <out>\n", argv[0]); 
+		printf("%s <database> <table> <query dir> <top K> <ignored> <n> <out>\n", argv[0]);
 		return 0;
 	}
 
diff --git a/pkgs/apps/ferret/src/src/lsh/LSH.h b/pkgs/apps/ferret/src/src/lsh/LSH.h
index e790771..2ca741f 100644
--- a/pkgs/apps/ferret/src/src/lsh/LSH.h
+++ b/pkgs/apps/ferret/src/src/lsh/LSH.h
@@ -6,6 +6,8 @@
 #include <cass_hash.h>
 #include <cass_bitmap.h>
 
+#define HUGE			3.40282347e+38F
+
 typedef struct {
 	int a_step, b_step;
 	double a_min, a_max;
@@ -139,6 +141,6 @@ void LSH_hash_score (LSH_t *lsh, int L, const float *pnt, uint32_t **hash, ptb_v
 void LSH_hash2_noperturb (LSH_t *lsh, uint32_t **hash, uint32_t *hash2, int L);
 
 void LSH_hash2_perturb (LSH_t *lsh, uint32_t **hash, uint32_t *hash2, ptb_vec_t *ptb, int l);
-		
+
 #endif
 
diff --git a/pkgs/apps/x264/parsec/gcc-pthreads.bldconf b/pkgs/apps/x264/parsec/gcc-pthreads.bldconf
index 7bf67b0..8286f5a 100644
--- a/pkgs/apps/x264/parsec/gcc-pthreads.bldconf
+++ b/pkgs/apps/x264/parsec/gcc-pthreads.bldconf
@@ -35,5 +35,5 @@ build_env="PATH=\"${PARSECDIR}/pkgs/tools/yasm/inst/${PARSECPLAT}/bin:${PATH}\""
 build_inplace="TRUE"
 
 # Arguments to pass to the configure script, if it exists
-build_conf="--enable-pthread --extra-asflags=\"${ASFLAGS}\" --extra-cflags=\"${CFLAGS}\" --extra-ldflags=\"${LDFLAGS} ${LIBS}\""
+build_conf="--enable-pic --enable-pthread --extra-asflags=\"${ASFLAGS}\" --extra-cflags=\"${CFLAGS}\" --extra-ldflags=\"${LDFLAGS} ${LIBS}\""
 
diff --git a/pkgs/netapps/netferret/src/server/benchmark/ferret-pthreads.c b/pkgs/netapps/netferret/src/server/benchmark/ferret-pthreads.c
index 0f700e8..d843c1a 100644
--- a/pkgs/netapps/netferret/src/server/benchmark/ferret-pthreads.c
+++ b/pkgs/netapps/netferret/src/server/benchmark/ferret-pthreads.c
@@ -1,6 +1,6 @@
 /* AUTORIGHTS
 Copyright (C) 2007 Princeton University
-      
+
 This file is part of Ferret Toolkit.
 
 Ferret Toolkit is free software; you can redistribute it and/or modify
@@ -54,6 +54,7 @@ Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 #define DEFAULT_DEPTH	25
 #define MAXR	100
 #define IMAGE_DIM	14
+#define HUGE		3.40282347e+38F
 
 const char *db_dir = NULL;
 const char *table_name = NULL;
@@ -218,7 +219,7 @@ void *t_acceptor (void *dummy)
 #endif
 		enqueue(&q_req_load, req);
 	}
-	
+
 	/* 5. exit */
 	return NULL;
 }
@@ -234,44 +235,44 @@ void *t_load (void *dummy)
 	int 			bytes_input;
 	struct packet		*pkt_ptr;
 	int			fd;
- 
-	pkt_ptr = (struct packet*)malloc(MAX_SOCKET_BUF); 
+
+	pkt_ptr = (struct packet*)malloc(MAX_SOCKET_BUF);
 
 	while(1){
 		/* 1. dequeue one request */
 		if(dequeue(&q_req_load, &req) < 0)
 		    break;
-		
+
 		assert(req != NULL);
-		
+
 		fd = req->fd;
 
 		/* 2. receive data from clients */
-		r = 0; 
-		bytes_recv = 0; 
+		r = 0;
+		bytes_recv = 0;
 		bytes_input = MAX_SOCKET_BUF;
 		pkt_ptr->len = 0;
 		buf = (char*)pkt_ptr;
 
-		while(bytes_recv < bytes_input) { 
-#ifdef ENABLE_PARSEC_UPTCPIP 
-			if ((r = uptcp_recv(fd, buf+bytes_recv, (bytes_input-bytes_recv), 0)) == -1) { 
-#else 
-			if ((r = recv(fd, buf+bytes_recv, (bytes_input-bytes_recv), 0)) == -1) { 
-#endif 
-				printf("I/O error\n"); 
-			} 
+		while(bytes_recv < bytes_input) {
+#ifdef ENABLE_PARSEC_UPTCPIP
+			if ((r = uptcp_recv(fd, buf+bytes_recv, (bytes_input-bytes_recv), 0)) == -1) {
+#else
+			if ((r = recv(fd, buf+bytes_recv, (bytes_input-bytes_recv), 0)) == -1) {
+#endif
+				printf("I/O error\n");
+			}
 
 			/*
 			 * Extract bytes_input from recv_buf
 			 *
-			 * struct send_buf { 
- 			 *    int   send_bytes; 
+			 * struct send_buf {
+ 			 *    int   send_bytes;
  			 *    char  *buf;
  			 * };
  			 */
 			if(bytes_input == MAX_SOCKET_BUF)
-				bytes_input = pkt_ptr->len + sizeof(int); 
+				bytes_input = pkt_ptr->len + sizeof(int);
 
 			if(pkt_ptr->len == -1){  /* last connection */
 #ifdef ENABLE_PARSEC_UPTCPIP
@@ -280,7 +281,7 @@ void *t_load (void *dummy)
 			      goto exit;
 }
 
-			bytes_recv += r; 
+			bytes_recv += r;
 		}
 
 
@@ -310,7 +311,7 @@ void *t_seg (void *dummy)
 	{
 		if(dequeue(&q_load_seg, &load) < 0)
 		    break;
-		
+
 		assert(load != NULL);
 		seg = (struct seg_data *)calloc(1, sizeof(struct seg_data));
 
@@ -341,7 +342,7 @@ void *t_extract (void *dummy)
 	{
 		if(dequeue(&q_seg_extract, &seg) < 0)
 		    break;
-		
+
 		assert(seg != NULL);
 		extract = (struct extract_data *)calloc(1, sizeof(struct extract_data));
 
@@ -369,7 +370,7 @@ void *t_vec (void *dummy)
 	{
 		if(dequeue(&q_extract_vec, &extract) < 0)
 		    break;
-		
+
 		assert(extract != NULL);
 		vec = (struct vec_query_data *)calloc(1, sizeof(struct vec_query_data));
 		vec->fd = extract->fd;
@@ -411,7 +412,7 @@ void *t_rank (void *dummy)
 	{
 		if(dequeue(&q_vec_rank, &vec) < 0)
 		    break;
-		
+
 		assert(vec != NULL);
 
 		rank = (struct rank_data *)calloc(1, sizeof(struct rank_data));
@@ -455,7 +456,7 @@ void *t_out (void *dummy)
 	char	*sendbuf, *str_ptr;
 	int	bufsize, str_len;
 	struct packet	*pkt_ptr;
-	
+
 	if((pkt_ptr = (struct packet*)malloc(MAX_SOCKET_BUF)) == NULL){
 		fprintf(stderr, "Not enough memory for sendbuf\n");
 		return (void*)-1;
@@ -466,7 +467,7 @@ void *t_out (void *dummy)
 	{
 		if(dequeue(&q_rank_out, &rank) < 0)
 		    break;
-		
+
 		assert(rank != NULL);
 
 		bufsize = 0;
@@ -500,7 +501,7 @@ void *t_out (void *dummy)
 		free(rank);
 
 		cnt_dequeue++;
-		
+
 		fprintf(stderr, "(%d,%d)\n", cnt_enqueue, cnt_dequeue);
 	}
 
@@ -547,7 +548,7 @@ int main (int argc, char *argv[])
 
 	if (argc < 6)
 	{
-		printf("%s <database> <table> <top K> <depth> <n>\n", argv[0]); 
+		printf("%s <database> <table> <top K> <depth> <n>\n", argv[0]);
 		return 0;
 	}
 
@@ -585,7 +586,7 @@ int main (int argc, char *argv[])
 	}
 
 	if (query_table != table) cass_table_load(query_table);
-	
+
 	cass_map_load(query_table->map);
 
 	cass_table_load(table);
diff --git a/pkgs/netapps/netferret/src/server/src/lsh/LSH.h b/pkgs/netapps/netferret/src/server/src/lsh/LSH.h
index e790771..96e5107 100644
--- a/pkgs/netapps/netferret/src/server/src/lsh/LSH.h
+++ b/pkgs/netapps/netferret/src/server/src/lsh/LSH.h
@@ -6,6 +6,8 @@
 #include <cass_hash.h>
 #include <cass_bitmap.h>
 
+#define HUGE		3.40282347e+38F
+
 typedef struct {
 	int a_step, b_step;
 	double a_min, a_max;
@@ -139,6 +141,6 @@ void LSH_hash_score (LSH_t *lsh, int L, const float *pnt, uint32_t **hash, ptb_v
 void LSH_hash2_noperturb (LSH_t *lsh, uint32_t **hash, uint32_t *hash2, int L);
 
 void LSH_hash2_perturb (LSH_t *lsh, uint32_t **hash, uint32_t *hash2, ptb_vec_t *ptb, int l);
-		
+
 #endif
 
-- 
2.17.1

